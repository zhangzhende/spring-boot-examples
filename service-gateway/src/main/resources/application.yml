#服务注册与发现配置
eureka:
  instance:
    prefer-ip-address: true
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/

spring:
  application:
    name: gateway
#链路追踪配置
  cloud:
    zipkin:
      base-url: http://localhost:9411
    sleuth:
      sampler:
        #链路信息全都要
        percentage: 1.0
#gateway 网关配置
    gateway:
      discovery:
        locator:
#        spring.cloud.gateway.discovery.locator.enabled：是否与服务注册于发现组件进行结合，通过 serviceId 转发到具体的服务实例。
#默认为false，设为true便开启通过服务中心的自动根据 serviceId 创建路由的功能。
          enabled: true
          lower-case-service-id: true
      routes:
      - id: service-mongo
      # 必须使用http进行转发，lb代表从注册中心获取服务
        uri: lb://service-mongo
        predicates:
        - Path=/mongoapi/**
        filters:
        # http://localhost:6601/userapi/user/users/2, 必须加上StripPrefix=1，否则访问服务时会带上userapi 而不是我们期望的去掉userapi，只保留**部分
        - StripPrefix=1
#        继承工厂方式实现的filter，名字是类前缀，AuthorizeGatewayFilterFactory的Authorize，值是config的参数，这里指是否有效
        - TokenAuth=true
        #        自定义过滤器，对应于PlatformAuthGatewayFilterFactory，true/false表示config的参数,表示是否使用该过滤器
        - PlatformAuth=true
#        - AddResponseHeader=X-Response-Default-Foo, Default-Bar
      - id: service-one
        uri: lb://service-one
        predicates:
        - Path=/oneapi/**
        filters:
        - StripPrefix=1
        - UidAuth=true
        #TokenAuth使用的是实现接口的方式，其中指定了执行顺序，会按照指定的顺序执行，0，比较靠前，所以，通过继承的方式实现可以不指定顺序，这样
        #配置文件中配置的顺序就是执行顺序，故而推荐继承
        - TokenAuth=true
        - PlatformAuth=true
      #这里的配置会有用，能跳转但是无法拦截，但是自定义拦截器里面的bean定义的才会被拦截器拦截
#      - id: service-es
#        uri: lb://service-es
#        predicates:
#        - Path=/esapi/**
#        filters:
#        - StripPrefix=1
server:
  port: 9000
logging:
  level:
    org.springframework.cloud.*: debug

